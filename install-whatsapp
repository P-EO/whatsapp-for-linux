#!/usr/bin/env bash

echo "  ▄▄█▀▀▀▀▀▀▀█▄▄		 _       ____          __       __    _                 
▄█▀░░░▄▄░░░░░░░▀█▄	| |     / / /_  ____ _/ /______/ /   (_)___  __  ___  __
█░░░░███░░░░░░░░░█	| | /| / / __ \/ __ '/ __/ ___/ /   / / __ \/ / / / |/_/
█░░░░██▄░░░░░░░░░█	| |/ |/ / / / / /_/ / /_(__  ) /___/ / / / / /_/ />  <  
█░░░░░▀██▄░██░░░░█	|__/|__/_/ /_/\__,_/\__/____/_____/_/_/ /_/\__,_/_/|_|  
█░░░░░░░▀███▀░░░█	
▀█▄░░░░░░░░░░░▄█▀	
  █░░░░▄▄▄▄▄█▀▀		
 ▄▀░▄█▀				
 ▀▀▀			"	
# A simple error function
function error {
  echo -e "\\e[41;30m$1\\e[0m"
  exit 1 
}

# A simple success function
function success {
  echo -e "\\e[102;30m$1\\e[0m"
}

# To reduce annoying stderr output by apt & nativefier
function reduceoutput { 
  grep -v "apt does not have a stable CLI interface.\\|are up to date\\|Hit\\|Packaging\\|Preparing\\|Converting\\|Finalizing\\|App built to\\|shortcuts are up to you\\|to remove\\|Reading package lists...\\|newest version\\|Building dependency tree\\|Reading state information...\\|Need to get\\|After this operation,\\|Get:\\|Fetched\\|Selecting previously unselected package\\|Preparing to unpack\\|Unpacking \\|Setting up \\|Processing triggers for "
}

# Check if user using root privilege to run this script
if [[ "$(id -u)" == 0 ]]; then
	error "This script is not designed to be runned as root! Please try again as a regular user." 
fi

# Log errors
function log {
  tee "$directory/log.txt"
}

# Create new WhatsApp directory and a blank file to store logs 
sudo rm -rf "${HOME}/WhatsApp" 2> /dev/null
mkdir "${HOME}/WhatsApp" || error  "Failed creating folder in your home folder."
directory="${HOME}/WhatsApp"
cd "$directory" | log || error  "Failed to cd to $directory"
touch log.txt
echo ""


# Identifying the system package manager
if command -v apt > /dev/null; then
    packagemanager=apt
    success "Your package manager is $packagemanager"
    echo -e "\\n\\n"    
    success "Updating package list..."
    ( sudo $packagemanager update 2>&1 | log || error "Failed updating package list." ) 
    echo -e "\n"
    success "Installing wget and curl..."
    echo ""
    ( sudo $packagemanager install wget curl git -y 2>&1 || error "Failed installing wget and curl." ) 
    echo -e "\n"
elif command -v dnf > /dev/null; then
    packagemanager=dnf
    success "Your package manager is $packagemanager"
    sudo $packagemanager check-update | log
    sudo $packagemanager install curl -y | log || error  "Failed installing curl."
    sudo $packagemanager install wget -y | log || error  "Failed installing wget."
    sudo $packagemanager install git -y | log || error  "Failed installing git."
elif command -v yum > /dev/null; then
    packagemanager=yum
    success "Your package manager is $packagemanager"
    sudo $packagemanager check-update  | log
    sudo $packagemanager install curl -y | log || error  "Failed installing curl."
    sudo $packagemanager install wget -y | log || error  "Failed installing wget."
    sudo $packagemanager install git -y | log || error  "Failed installing git."
else
    error "Package manager not found. This script only support apt, yum and dnf."
fi


# Installing Nodejs using snapd
if ! command -v snap > /dev/null; then
    sudo $packagemanager install snapd -y
    sudo snap install node --classic
    if command -v node > /dev/null &&  command -v npm > /dev/null ; then 
        success "Nodejs installed sucessfully."
    fi
fi

# Installing Nativefier
if command -v npm > /dev/null; then
    if ! command -v nativefier > /dev/null; then
        success "Installing Nativefier..."
        npm install -g nativefier | log || error  "Failed installing Nativefier. Try running 'npm install -g nativefier' and run this script again."
        cd "${HOME}/WhatsApp" | log || error  "Failed cd to WhatsApp folder."
        if command -v nativefier > /dev/null; then
            success "Nativefier installed successfully."
        fi
    else 
        success "Nativefier is already installed."
    fi
else
    error "Failed. NPM not found. Try running 'sudo snap install node --classic' and run this script again."
fi

# Identifying architecture
arch=$(uname -m)

# Fix nativefier can't detect x86_64 architecture
if [ "$arch" == x86_64 ]; then
    arch=x64 
fi

echo -e "\n\n"

#Nativefying WhatsApp
if command -v nativefier > /dev/null; then
    success "Nativefying WhatsApp from http://web.whatsapp.com ..."
    cd "$directory" || error "Failed to cd to $directory"
    (nativefier https://web.whatsapp.com --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36" -a "$arch" --maximize -n WhatsApp ) 
    echo -e "\n"
    success "Successfully nativefied WhatsApp."
else
    error "Failed. Nativefier not found. Try running 'npm install -g nativefier' or with root 'sudo npm install -g nativefier' and run this script again. "
fi

echo -e "\n"

#Create desktop & menu shortcut
success "Creating desktop shortcut and menu shortcut..."
echo ""
cd "$directory" || error "Failed to cd to $directory."
git clone https://github.com/ITdairy/whatsapp-for-linux
echo -e "\n"
sudo cp ./whatsapp-for-linux/* ./ && sudo rm -rf ./whatsapp-for-linux
sudo cp ./whatsapp.desktop "$HOME/.local/share/applications" | log
sudo cp ./whatsapp.desktop "$HOME/Desktop" | log
sudo cp ./run-whatsapp ./WhatsApp-linux-$arch
success "Done! You should be able to run WhatsApp from desktop and menu bar."
echo -e "\n\n"
cd "$HOME"  || exit 
